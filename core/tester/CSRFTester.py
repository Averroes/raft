#
# Author: Nathan Hamiel
#
# Copyright (c) 2013 RAFT Team
#
# This file is part of RAFT.
#
# RAFT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# RAFT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with RAFT.  If not, see <http://www.gnu.org/licenses/>.
#

import lxml
from urllib.parse import parse_qs
from xml.sax.saxutils import escape
from lxml.html import builder as E


from actions import encoderlib


    
def form_to_get(url, html):
    """ Convert POST to GET """
    
    query_params = ""
    newhtml = lxml.html.fromstring(html)
    form = newhtml.forms[0]
    for item in form.form_values():
        
        query_params += item[0] + "=" + item[1]
        
    enc_params = encoderlib.url_encode(query_params)
        
    full_url = url + "/" + enc_params
    
    return full_url
    
    


def generate_csrf_form(url, reqData):
    """ Generate a CSRF form with a submit button """
    
    RAFT_CSRF_STATEMENT = "<!-- Generated by the RAFT CSRF Generator -->"
    
    test = 'E.INPUT(type="submit", value="submit")'
    inputs = ""
    
    parsed = parse_qs(reqData)
    
    for value in parsed:
        # print(parsed[value][0])
        
        inputs += 'E.INPUT(name="%s", value="%s"), ' % (value, parsed[value][0])
        
    collected_inputs = inputs.rstrip(",")
    
    HTML = """E.HTML(
        E.HEAD(E.SCRIPT(RAFT_CSRF_STATEMENT)),
        E.BODY(
            E.FORM(%s
                   E.INPUT(type="submit", value="submit"),
                   action="%s")
            
               )
    )""" % (inputs, url)
    
    #Ensure the object is properly converted and decoded prior to being returned
    # return(lxml.html.tostring(eval(HTML), pretty_print=True).decode("utf8"))
    return lxml.html.tostring(eval(HTML), pretty_print=True).decode("utf8") 

def generate_csrf_img(url, html):
    """ Create a piece of HTML that contains an image tag with the CSRF values """
    
    img_url = form_to_get(url, html)
    
    # Create an img tag that is 1x1 pixel
    HTML = E.HTML(
        E.HEAD(),
        E.BODY(
            E.IMG(src=img_url, height="1", width="1")
        )
    )
    
    # print(lxml.html.tostring(HTML).decode("utf8"))
    return lxml.html.tostring(HTML, pretty_print=True).decode("utf8")
    
    

def generate_csrf_html(url, reqData):
    """ Generate the initial response for the CSRF tester """
    
    htmlresult = generate_csrf_form(url, reqData)
    
    return htmlresult
    
    
